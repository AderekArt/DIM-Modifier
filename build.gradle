
plugins {
    id "io.toolebox.git-versioner" version "1.6.5"
    id 'org.openjfx.javafxplugin' version '0.0.10'
    // id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'org.beryx.jlink' version '2.24.1'
    id 'application'
    // id 'java'
}

group 'com.github.cfogrady'

repositories {
    mavenLocal()
    mavenCentral()
}

javafx {
    version = "17"
    modules = [ 'javafx.controls' ]
}

dependencies {
    //lombok
    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    testCompileOnly 'org.projectlombok:lombok:1.18.22'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'

    implementation 'com.github.cfogrady:vb-dim-reader:0.0.0.4-ac44e70'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    implementation 'org.slf4j:slf4j-api:1.7.32'
    implementation 'org.slf4j:slf4j-simple:1.7.32'
}

application {
    mainClass.set("com.github.cfogrady.dim.modifier.Main")
    mainModule.set("DIM.Modifier.main")
}

compileJava {
    sourceCompatibility = '11'
    targetCompatibility = '11'
}

abstract class WindowsBuildImageTask extends DefaultTask {
    @TaskAction
    def buildImage() {
        def f = new File('warp-packer.exe')
        if (!f.exists()) {
            new URL('https://github.com/dgiagio/warp/releases/download/v0.3.0/windows-x64.warp-packer.exe').withInputStream{ i -> f.withOutputStream{ it << i }}
        }
        def proc = "warp-packer.exe --arch windows-x64 --input_dir build\\image --exec bin\\DIM-Modifier.bat --output DIM-Modifier.exe".execute()
        proc.waitForProcessOutput(System.out, System.err)
    }
}

abstract class LinuxBuildImageTask extends DefaultTask {
    @TaskAction
    def buildImage() {
        def f = new File('warp-packer')
        if (!f.exists()) {
            new URL('https://github.com/dgiagio/warp/releases/download/v0.3.0/linux-x64.warp-packer').withInputStream{ i -> f.withOutputStream{ it << i }}
        }
        def proc = "warp-packer --arch linux-x64 --input_dir build/image --exec bin/DIM-Modifier --output DIM-Modifier".execute()
        proc.waitForProcessOutput(System.out, System.err)
    }
}

// Create a task using the task type
tasks.register('buildImageWin', WindowsBuildImageTask).configure{
    dependsOn(provider {
        tasks.findByName("jlink")
    })
}

tasks.register('buildImageLinux', LinuxBuildImageTask).configure{
    dependsOn(provider {
        tasks.findByName("jlink")
    })
}

test {
    useJUnitPlatform()
}